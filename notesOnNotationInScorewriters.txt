First a little context: whenever I'm in a new language/formal system/application, I try to get my bearings by finding out what elements of that language are first-class citizens and which aren't. Then, I study how second-class citizens need to be treated differently.

The notion of first-class citizenship was popularized by the purveyors of Scheme (MIT's dialect of LISP).  The idea is that all elements of a language need to be able to participate equally in all activities sanctioned by the language.  Otherwise, they aren't first class.  For instance, if one can put numbers into an array, one must also be able to put function definitions into arrays (otherwise functions are not first class).

The ramification of this for computer programming languages (and indeed, any system!) is that any deviation from first-class behavior results in a rabbit hole of special case logic that adds complexity for both implementors and users.  It also opens the door for inconsistencies, incoherence, and ambiguities in a language.  By making all citizens first-class, one can achieve elegant simplicity and uniformity.

Another consideration is static versus dynamic.  In this case, static means "give me what I ask for" and "don't second guess me".  Dynamic behavior can result in surprises.

I generally prefer static behavior and try to turn off any system algorithms to rewrite my code (if I'm in a programming interactive development environment) or notation (if I'm in a scorewriter).

I don't like systems that think they know better than me (even if they're right!), and that rewrite my code/notes behind my back; even if their intentions are good, they often seem "too clever by half".

--> Rests

Let's start with rests.

I believe rests ARE notes; they're merely notes that don't happen to have a pitch.  Another way to think of it:  rests have pitches of silence, and silence is every bit as legitimate a pitch as non-silence.  Music speaks with pregnant pauses in addition to moments of sound.

Hence, I like scorewriters that treat rests as first-class citizens.  For me, music is a static game of populating durations.  The durations could just as easily be populated with notes or rests.

I like to be able to promote notes to rests (and vice versa) as easily and seamlessly as possible.

In Sibelius, rests are first-class citizens; but in Dorico they aren't.

To make Dorico behave in a more static way, I often notate rests as notes (since notes ARE first class) while doing entry.  Then after I'm done manipulating everything as I want, I go back and delete rests that I notated as notes (which changes them into explicit rests).

In Dorico, you can remove rests (Edit -> Remove Rests); but if you do that, it makes it harder to get them back and promote missing rests to notes.

In Sibelius, you can hide rests, and make hidden rests invisible (to avoid clutter).  

I like being able to paste a rest over a note (thus converting the note to a rest) and vice versa.

--> Ties

Ties are a strange beast.  

I'm not sure I'd call them second-class citizens; perhaps it would be more accurate to call them composites or aggregates since they're composed of notes and ties.

For this reason, in Dorico, I like to delay tying notes until the end (when I've got everything in place).  If you tie entities too early in the game, you can't manipulate them like other primitive elements.

For instance, if you have a note (or notes) selected, and you hit R, that will replicate the entity (whatever it is).  This is where I want first-class behavior:  I could just as easily decide to replicate notes, rests, or any other music notation elements.

If you hit R when a tied entity is selected, you replicate the entire (tied) entity (which often isn't what I want).  Manipulating tied entities can often affect the shape of the surrouding environment they occur in, in ways I often don't like; since Dorico has a lot of dynamic behavior for adjusting ties based on the context.

Dorico is very keen on making sure that notes respect the beat, and will often convert durations to tied notes rather than untied notes of a longer duration. 

That's fine, but sometimes I don't want that behavior; hence the "Force Duration" button is my friend.

This lets me get more static behavior; I can select participants in ties separately (before I've tied them together), to allow me to change their duration and otherwise manipulate them, without impacting any tied entities.

Then, when everything looks right, I can (as my last step) perform the tie operations to tie them together.

Because of the way I work with ties, I'm fond of the scissors in Dorico:  this allows breaking apart tie chains into their constituent parts.  Often I need to break tie chains to manipulate the components in ways I forgot about, so being able to zip them an unzip them easily is really nice.

When entering an existing manuscript, I'm less interested in musical purity than I am in being able to mimic the existing document (even if some of the notational approach is not musically correct:  I like to make those decisions later in the game).  Hence, I often like to do things manually to avoid tie chains changing the shape of my carefully crafted musical shapes.

--> Copy, paste, and tweak

Due to the repetitive nature of music, I often like to hunt for a measure that has a similar structure to what I want, and tweak it.

In systems that have a lot of dynamic behavior, this can cause problems by rewriting things in ways I don't want as I'm in my tweaking process.

I like to have a chance to change things in a static way first, before any dynamic algorithms kick in to refactor my code.

(I wish I had a button to toggle dynamic algorithms from kicking in until I'm done!  Imagine for a moment a search engine that starts to search as you type your search text instead of waiting until you signal that you're done by hitting the search button.  Wouldn't that annoy you?  And yet, a lot of scorewriters have eager behavior tantamount to that.)

In some cases a copy-paste-tweak approach can be faster than straight note entry; in other cases it is slower, but simpler for me given that I'm not a professional musician and I look at music more as a form of code rather than as music.

To someone deeper in music, my approach might seem like the notational equivalent of hunt-and-peck typing; but I often program in a copy-paste-tweak manner, so that approach feels comfortable to me.

--> Duration is king, pitches come last

Regardless what you think of the issue of rests and first-class citizens; one thing that cannot be denied is that rests and notes both share in the property of duration.

Hence, when I need to notate something from scratch, I think top down fashion starting from that trait that notes and rests both share in:  duration.

Because printed music is typically black and white, voices in printed music aren't typically color coded as they are in music notation software.

Incidentally, I'm in favor of colored music printouts:  why lose the information about voices?

When notating existing manuscripts, part of the puzzle is figuring out which notes belong to which voices, and how the voices should be numbered.

For instance, some measures might have 2 voices, while others have 3 or more voices.  This is where some analysis of the music comes into play in planning out voice numbers.

A measure with two voices perhaps should feature voice 1 and voice 3 rather than being numbered as 1 and 2.  I try (as much as possible) to make voice numberings match the roles they play in the music.

Often, I like to start with a voice and notate all the smallest durations by putting in notes of the same pitch.  Notes of the same pitch provide a grid or baseline that makes it easier to see where other notes from other voices will go.

Once I get all the basic structure in place, I then resolve the rests to match the document I'm working from.

I might later decide that the existing manuscript isn't musically correct; but generally those types of corrections come later.  I like to mimic the look-and-feel of existing manuscripts, except where I believe they are musically incorrect.

As the last step, once the structure is all in place (including the rests), I then begin to adjust the pitches.

--> Scroll view

When notating, or practicing an instrument, I prefer to use scroll view.  Different scorewriters have different names for this; but it's basically a continual horizontal scrolling representation of the music.

Dorico has a good separation of concerns, relegating edit mode to a separate tab called "Write", and a tab called "Engrave" for taking care of cosmetic concerns involved in making manuscripts look nice for printout or conversion to PDF.

--> Playback

Playback is extremely important.  My ears often hear what my eyes miss.

Playback is empowering:  it gives people (even those with no dexterity in playing an instrument) to ability to create "performances that never were" that can rival (or exceed) even the best of human performers.

This is reminiscent of the point in history where a computer first beat a chess champion.

It's also empowering in a similar way to how the printing press made printing accessible to the masses, and the point in history where word processors and computers made writing more accessible.

Playback while doing note entry is very helpful to the process.

In deciding what versions of a manuscript are worth working with, it's nice to type them in and hear them; before taking the time to learn to play them on instruments.

For instruments that have tablature, this provides computer assistance in deciding fingerings (for both the left and right hands), and where on the neck a passage should be rendered.

Scorewriters are wonderful assistants in determining playability, and notating such considerations.

Scorewriters are also wonderful tools to assist in arranging, composing, and transcribing (from other instruments).
